// This file is generated by build.rs
include!(concat!(env!("OUT_DIR"), "/stmt.gen.rs"));

use std::{collections::HashMap, rc::Rc};
use std::cell::RefCell;

use crate::{expr::ExprErr};

pub type StmtRes = Result<Stmt, ExprErr>;

// Function info: lots of stuff, so carry it around Rc'd.
pub struct Function {
	pub name: Token,
	pub parameters: Vec<Token>,
	pub body: Vec<Stmt>,
	pub is_initializer: bool,
}

impl Function {
	pub fn new(name: Token, parameters: Vec<Token>, body: Vec<Stmt>, is_initializer: bool) -> Self {
		Function { name, parameters, body, is_initializer }
	}

	pub fn new_as_rc(name: Token, parameters: Vec<Token>, body: Vec<Stmt>, is_initializer: bool) -> Rc<Self> {
		Rc::new(Self::new(name, parameters, body, is_initializer))
	}

	pub fn new_as_stmt(name: Token, parameters: Vec<Token>, body: Vec<Stmt>, is_initializer: bool) -> Stmt {
		Stmt::Function(Rc::new(Self::new(name, parameters, body, is_initializer)))
	}

	pub fn new_as_stmt_res(name: Token, parameters: Vec<Token>, body: Vec<Stmt>, is_initializer: bool) -> StmtRes {
		Ok(Self::new_as_stmt(name, parameters, body, is_initializer))
	}
}