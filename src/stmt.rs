// This file is generated by build.rs
include!(concat!(env!("OUT_DIR"), "/stmt.gen.rs"));

use std::{collections::HashMap, rc::Rc};
use std::cell::RefCell;

use crate::{callable::LoxCallable, environment::Environment, expr::ExprErr};

pub type StmtRes = Result<Stmt, ExprErr>;

// Function info: lots of stuff, so carry it around Rc'd.
pub struct Function {
	pub name: Token,
	pub parameters: Vec<Token>,
	pub body: Vec<Stmt>,
}

// Similar to functions, we put the class info in a struct that is Rc'd.

pub struct LoxClass {
	pub name: String,
	pub methods: HashMap<String, (Rc<Function>, Rc<RefCell<Environment>>)>,
}

impl Function {
	pub fn new(name: Token, parameters: Vec<Token>, body: Vec<Stmt>) -> Self {
		Function { name, parameters, body }
	}

	pub fn new_as_rc(name: Token, parameters: Vec<Token>, body: Vec<Stmt>) -> Rc<Self> {
		Rc::new(Self::new(name, parameters, body))
	}

	pub fn new_as_stmt(name: Token, parameters: Vec<Token>, body: Vec<Stmt>) -> Stmt {
		Stmt::Function(Rc::new(Self::new(name, parameters, body)))
	}

	pub fn new_as_stmt_res(name: Token, parameters: Vec<Token>, body: Vec<Stmt>) -> StmtRes {
		Ok(Self::new_as_stmt(name, parameters, body))
	}

	pub fn to_lox_value(fun: &Rc<Function>, closure: &Rc<RefCell<Environment>>) -> LoxValue {
		return LoxValue::Callable(LoxCallable::FnLox(
			Rc::clone(fun),
			Rc::clone(closure)
		))
	}
}

impl LoxClass {
	pub fn new(name: String, methods: HashMap<String, (Rc<Function>, Rc<RefCell<Environment>>)>) -> Self {
		LoxClass { name, methods }
	}

	pub fn new_as_rc(name: String, methods: HashMap<String, (Rc<Function>, Rc<RefCell<Environment>>)>) -> Rc<Self> {
		Rc::new(Self::new(name, methods))
	}

	pub fn to_lox_value(class: &Rc<LoxClass>) -> LoxValue {
		return LoxValue::Callable(LoxCallable::FnClass(
			Rc::clone(class)
		))
	}

	pub fn new_as_lox_value(name: String, methods: HashMap<String, (Rc<Function>, Rc<RefCell<Environment>>)>) -> LoxValue {
		return LoxValue::Callable(LoxCallable::FnClass(
			Self::new_as_rc(name, methods)
		))
	}
}